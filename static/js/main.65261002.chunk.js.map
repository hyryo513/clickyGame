{"version":3,"sources":["components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/Footer/index.js","components/ClickItem/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","message","status","react_default","a","createElement","className","href","score","topScore","Header","_ref","children","Container","Footer","ClickItem","Object","assign","role","images","id","url","process","App","state","clickedId","loadImages","i","length","j","Math","floor","random","handleClick","currentScore","_this","indexOf","push","setState","this","_this2","components_Nav","components_Header","map","img","components_ClickItem","key","style","backgroundImage","concat","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65261002.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Nav(props) {\n  let message;\n  if (props.status === \"start\") {\n    message = \"Click an image to begin!\"\n  }\n  else if (props.status === \"end\") {\n    message = \"You guessed incorrectly!\"\n  }\n  else {\n    message = \"You guessed correctly!\"\n  };\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <ul>\n        <li className=\"brand\">\n          <a href=\"/\">Clicky Game</a>\n        </li>\n        <li>\n          {message}\n        </li>\n        <li>\n          Score:&nbsp;{props.score}&nbsp;|&nbsp;Top Score:&nbsp;{props.topScore}\n        </li>\n      </ul> \n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header({ children }) {\n  return (\n    <div\n      className=\"header\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport default function Container({children }) {\n  return <div className=\"container\">{children}</div>;\n}\n\n","import React from \"react\";\nimport \"./style.css\";\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport default function Footer({children }) {\n  return <div className=\"footer\">{children}</div>;\n}\n\n","import React from \"react\";\nimport \"./style.css\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction ClickItem(props) {\n  return (\n    <div {...props} role=\"img\">\n    </div>\n  );\n}\n\nexport default ClickItem;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport ClickItem from \"./components/ClickItem\"\n\nconst images = [\n  {id: 1, url: process.env.PUBLIC_URL + \"/images/Jerry_Smith.png\"},\n  {id: 2, url: \"%PUBLIC_URL%/images/Rick_Sanchez.png\"},\n  {id: 3, url: \"%PUBLIC_URL%/images/Beth_Smith.png\"},\n  {id: 4, url: \"%PUBLIC_URL%/images/Diane.jpg\"},\n  {id: 5, url: \"%PUBLIC_URL%/images/bird-person.png\"},\n  {id: 6, url: \"%PUBLIC_URL%/images/evilmorty.jpeg\"},\n  {id: 7, url: \"%PUBLIC_URL%/images/gianthead.png\"},\n  {id: 8, url: \"%PUBLIC_URL%/images/picklerick.png\"},\n  {id: 9, url: \"%PUBLIC_URL%/images/meeseeks.png\"},\n  {id: 10, url: \"%PUBLIC_URL%/images/morty.png\"},\n  {id: 11, url: \"%PUBLIC_URL%/images/goldenford.png\"},\n  {id: 12, url: \"%PUBLIC_URL%/images/Summer_is_cool.jpg\"}\n]\n\nclass App extends Component {\n  \n  state = {\n    score: 0,\n    topScore: 0,\n    status: \"start\",\n    clickedId: []\n  };\n\n  componentWillMount() {\n    this.loadImages(images);\n  };\n\n  loadImages = (images) => {\n      for (let i = images.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [images[i], images[j]] = [images[j], images[i]];\n      }\n  }\n\n  handleClick = id => {\n    let currentScore = this.state.score\n    if (this.state.clickedId.indexOf(id) < 0) {\n      this.state.clickedId.push(id)\n      if (this.state.status === \"start\" || \"end\") {\n      this.setState({status: \"\"})\n      }\n      currentScore = this.state.score + 1;\n      this.setState({score: currentScore})\n    }\n    else {\n      if (currentScore > this.state.topScore){\n        this.setState({topScore: currentScore})\n      }\n      this.setState({\n        score: 0,\n        status: \"end\",\n        clickedId: []\n      })\n    }\n    this.loadImages(images)\n  }\n\n  render () {\n    return (\n    <div>\n      <Nav score={this.state.score} topScore={this.state.topScore} status={this.state.status}/>\n      <Header>\n        <h1>Clicky Game!</h1>\n        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n      </Header>\n      <Container>\n        {images.map(img => {\n          return <ClickItem key={img.id} \n                            id={img.id} \n                            style={{backgroundImage: `url(${img.url})`}} \n                            onClick={() => this.handleClick(img.id)}\n                            className={(this.state.status === \"end\") ? \"click-item shake\" : \"click-item\"}\n          />\n          })}\n      </Container>\n      <Footer>\n        Clicky Game!\n      </Footer>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}